# modular-boost/libs/fixed_point/test/jamfile.v2

# fixed_point Tests using Unit Test Library

# Copyright Paul A. Bristow 2015

# From Copyright 2005: Eric Niebler
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

import testing ;  # Bring in rules for testing
import modules ;

if ! $(BOOST_ROOT)
{
    BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;
}

# Create an alias for the boost unit test framework. You don't need this
# if you're using minimal or lightweight test.
use-project /boost/test : $(BOOST_ROOT)/libs/test/build ;
alias boost_unit_test : /boost/test//boost_unit_test_framework/<link>static ;
#  alias boost_unit_test : /boost/test//boost_unit_test_framework/<link>shared ;

project checks
    : requirements
      <include>$(boost-root)
      <include>. # .cpp files in fixed_point/test.
      <include>../include/ # fixed_point .hpp files.
      <library>boost_unit_test
      <link>static
      <toolset>gcc:<cxxflags>-std=gnu++11
      <toolset>gcc:<cxxflags>-Wno-unused-local-typedefs
      <toolset>gcc:<cxxflags>-Wno-deprecated-declarations
      <toolset>gcc:<cxxflags>-Wno-long-long
      <toolset>gcc:<cxxflags>-ftrack-macro-expansion=0 # Suppress note: in expansion of macro
      <toolset>clang:<cxxflags>-std=c++11
      <toolset>msvc:<asynch-exceptions>on # Needed for Boost.Test
      <toolset>msvc:<warnings>all
      <toolset>msvc:<define>_SCL_SECURE_NO_WARNINGS
      <toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
      <toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
      <toolset>msvc:<define>_CRT_SECURE_NO_WARNINGS

      # Warning suppression:
      #<toolset>msvc:<cxxflags>/wd4996 # 'putenv': The POSIX name for this item is deprecated.
      #<toolset>msvc:<cxxflags>/wd4512 # assignment operator could not be generated.
      #<toolset>msvc:<cxxflags>/wd4610 #  object 'class' can never be instantiated - user-defined constructor required.
      #<toolset>msvc:<cxxflags>/wd4510 # The compiler cannot generate a default constructor for the specified class and no user-defined constructor #was created. You will not be able to create objects of this type.
      #<toolset>msvc:<cxxflags>/wd4224 # nonstandard extension used : formal parameter 'arg' was previously defined as a type.
      #<toolset>msvc:<cxxflags>/wd4127 # expression is constant.
      #<toolset>msvc:<cxxflags>/wd4701 # needed for lexical cast - temporary.
      #<toolset>msvc:<cxxflags>/wd4100 # Unreferenced formal parameter.
    ;

test-suite "Fixed_point"
    :
      [ run test_negatable_basic_arithmetic_fastest.cpp boost_unit_test ]
      [ run test_negatable_basic_arithmetic_nearest_even.cpp boost_unit_test ]
      [ run test_negatable_basic_bare_metal_config_16bit metal_config.cpp boost_unit_test ]
      [ run test_negatable_basic_bare metal_config_32bit.cpp boost_unit_test ]
      [ run test_negatable_basic_basic_ops.cpp boost_unit_test ]
      [ run test_negatable_basic_bit_pattern.cpp boost_unit_test ]
      [ run test_negatable_basic_construct.cpp boost_unit_test ]
      [ run test_negatable_basic_limits.cpp boost_unit_test ]
      [ run test_negatable_basic_mixed_constructors_part1.cpp boost_unit_test ]
      [ run test_negatable_basic_mixed_constructors_part2.cpp boost_unit_test ]
      [ run test_negatable_basic_mixed_math.cpp boost_unit_test ]
      [ run test_negatable_basic_multiply.cpp boost_unit_test ]
      [ run test_negatable_constants_local_ln_two.cpp boost_unit_test ]
      [ run test_negatable_constants_local_pi.cpp boost_unit_test ]
      [ run test_negatable_func_arccosine_big.cpp boost_unit_test ]
      [ run test_negatable_func_arccosine_small.cpp boost_unit_test ]
      [ run test_negatable_func_arccosine_tiny.cpp boost_unit_test ]
      [ run test_negatable_func_arcsine_big.cpp boost_unit_test ]
      [ run test_negatable_func_arcsine_small.cpp boost_unit_test ]
      [ run test_negatable_func_arcsine_tiny.cpp boost_unit_test ]
      [ run test_negatable_func_arctangent_big.cpp boost_unit_test ]
      [ run test_negatable_func_arctangent_small.cpp boost_unit_test ]
      [ run test_negatable_func_arctangent_tiny.cpp boost_unit_test ]
      [ run test_negatable_func_cosine_big.cpp boost_unit_test ]
      [ run test_negatable_func_cosine_small.cpp boost_unit_test ]
      [ run test_negatable_func_cosine_tiny.cpp boost_unit_test ]
      [ run test_negatable_func_exp_fastest.cpp boost_unit_test ]
      [ run test_negatable_func_exp_nearest_even.cpp boost_unit_test ]
      [ run test_negatable_func_exp_small.cpp boost_unit_test ]
      [ run test_negatable_func_exp_tiny.cpp boost_unit_test ]
      [ run test_negatable_func_floor_ceil.cpp boost_unit_test ]
      [ run test_negatable_func_frexp_ldexp.cpp boost_unit_test ]
      [ run test_negatable_func_hyperbolic_arccosine_big.cpp ]
      [ run test_negatable_func_hyperbolic_arccosine_small.cpp ]
      [ run test_negatable_func_hyperbolic_arcsine_big.cpp ]
      [ run test_negatable_func_hyperbolic_arcsine_small.cpp ]
      [ run test_negatable_func_hyperbolic_arctangent_big.cpp ]
      [ run test_negatable_func_hyperbolic_arctangent_small.cpp ]
      [ run test_negatable_func_hyperbolic_cosine_big.cpp ]
      [ run test_negatable_func_hyperbolic_cosine_small.cpp ]
      [ run test_negatable_func_hyperbolic_sine_big.cpp ]
      [ run test_negatable_func_hyperbolic_sine_small.cpp ]
      [ run test_negatable_func_hyperbolic_tangent_big.cpp ]
      [ run test_negatable_func_hyperbolic_tangent_small.cpp ]
      [ run test_negatable_func_log_fastest.cpp boost_unit_test ]
      [ run test_negatable_func_log_nearest_even.cpp boost_unit_test ]
      [ run test_negatable_func_log_tiny.cpp boost_unit_test ]
      [ run test_negatable_func_sine_big.cpp boost_unit_test ]
      [ run test_negatable_func_sine_small.cpp boost_unit_test ]
      [ run test_negatable_func_sine_tiny.cpp boost_unit_test ]
      [ run test_negatable_func_sqrt_big.cpp boost_unit_test ]
      [ run test_negatable_func_sqrt_small_fastest.cpp boost_unit_test ]
      [ run test_negatable_func_sqrt_small_nearest_even.cpp boost_unit_test ]
      [ run test_negatable_func_sqrt_tiny.cpp boost_unit_test ]
      [ run test_negatable_func_tangent_big.cpp boost_unit_test ]
      [ run test_negatable_func_tangent_small.cpp boost_unit_test ]
      [ run test_negatable_func_tangent_tiny.cpp boost_unit_test ]
      [ run test_negatable_math_bernoulli_b2n.cpp boost_unit_test ]
      [ run test_negatable_math_cbrt_fastest.cpp boost_unit_test ]
      [ run test_negatable_math_cbrt_nearest_even.cpp boost_unit_test ]
      [ run test_negatable_math_cyl_bessel_j_big.cpp boost_unit_test ]
      [ run test_negatable_math_cyl_bessel_j_small.cpp boost_unit_test ]
      [ run test_negatable_math_root_find_toms748.cpp boost_unit_test ]
      [ run test_negatable_math_trapezoid_integral.cpp boost_unit_test ]
      [ run test_negatable_round_trip_digits02_005m2.cpp boost_unit_test ]
      [ run test_negatable_round_trip_digits10_001.cpp boost_unit_test ]
      [ run test_negatable_round_trip_digits10_002.cpp boost_unit_test ]
      [ run test_negatable_round_trip_digits10_003.cpp boost_unit_test ]
      [ run test_negatable_round_trip_digits10_005.cpp boost_unit_test ]
      [ run test_negatable_round_trip_digits10_006.cpp boost_unit_test ]
      [ run test_negatable_round_trip_digits10_007.cpp boost_unit_test ]
      [ run test_negatable_round_trip_digits10_014.cpp boost_unit_test ]
      [ run test_negatable_round_trip_digits10_018.cpp boost_unit_test ]
      [ run test_negatable_round_trip_digits10_050.cpp boost_unit_test ]
      [ run test_negatable_round_trip_digits10_100.cpp boost_unit_test ]
      [ run test_negatable_round_trip_digits10_999.cpp boost_unit_test ]

    ;

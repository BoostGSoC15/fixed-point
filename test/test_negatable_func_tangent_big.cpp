///////////////////////////////////////////////////////////////////////////////
//  Copyright Christopher Kormanyos 2015.
//  Copyright Nikhar Agrawal 2015.
//  Copyright Paul Bristow 2015.
//  Distributed under the Boost Software License,
//  Version 1.0. (See accompanying file LICENSE_1_0.txt
//  or copy at http://www.boost.org/LICENSE_1_0.txt)

//! \file
//!\brief Tests for the trogonometric tangent function of (fixed_point) for a big digit range.

#include <array>
#include <cmath>
#include <string>

#define BOOST_TEST_MODULE test_negatable_func_tangent_big
#define BOOST_LIB_DIAGNOSTIC

#include <boost/fixed_point/fixed_point.hpp>
#include <boost/test/included/unit_test.hpp>

namespace local
{
  // Table[N[Tan[n / 10], 40], {n, 1, 127, 1}]
  const std::array<std::string, 128U> reference =
  {{
    std::string("+0.0"),
    std::string("+0.100334672085450545058080045781111536819"),
    std::string("+0.202710035508672483321358271647534482626"),
    std::string("+0.309336249609623233035303679698294667257"),
    std::string("+0.422793218738161761981635427165290333942"),
    std::string("+0.546302489843790513255179465780285383297"),
    std::string("+0.684136808341692317070925417463335745242"),
    std::string("+0.842288380463079448128135002212937717187"),
    std::string("+1.029638557050364012746361172820365284168"),
    std::string("+1.260158217550339137134575485395748477834"),
    std::string("+1.557407724654902230506974807458360173087"),
    std::string("+1.964759657248651950930922781779378243719"),
    std::string("+2.572151622126318935409994236033363956529"),
    std::string("+3.602102447967978151231145515076513739703"),
    std::string("+5.797883715482889643707720243603699045994"),
    std::string("+14.10141994717171938764608365198775644566"),
    std::string("-34.23253273555741705801487543047619090178"),
    std::string("-7.696602139459158414128192968298660916365"),
    std::string("-4.286261674628063525451888952280266680207"),
    std::string("-2.927097514677772703686899189270873300663"),
    std::string("-2.185039863261518991643306102313682543432"),
    std::string("-1.709846542904507748347780793803903757761"),
    std::string("-1.373823056768795160140036763333469874303"),
    std::string("-1.119213641734132171232356694076227903138"),
    std::string("-0.916014289673410512730863247508105793993"),
    std::string("-0.747022297238660279355352687825274557904"),
    std::string("-0.601596613089758722736081892691279782934"),
    std::string("-0.472727629103037507951989181263895161058"),
    std::string("-0.355529831651175877577352603635435038169"),
    std::string("-0.246405393971966255343567073885305764762"),
    std::string("-0.142546543074277805295635410533913493226"),
    std::string("-0.041616654585635989401004941249405869843"),
    std::string("+0.058473854459578467625867741676813702164"),
    std::string("+0.159745747660032396679161709396342643573"),
    std::string("+0.264316900867425266948922953920265303727"),
    std::string("+0.374585640158594666330512579989147388450"),
    std::string("+0.493466729984903708944581643196496088275"),
    std::string("+0.624733075224563621642821507549383135152"),
    std::string("+0.773556090503126072858707265894960344942"),
    std::string("+0.947424649935892818570839652141359572698"),
    std::string("+1.157821282349577583137342418267323923120"),
    std::string("+1.423526483194365890301115308682362002201"),
    std::string("+1.777779774508840961776232100905163372609"),
    std::string("+2.285847877366981240559030985232569200793"),
    std::string("+3.096323780649741768225302453517736061503"),
    std::string("+4.637332054551184468319086694959626730020"),
    std::string("+8.860174895648073898427495371230199784565"),
    std::string("+80.71276296747361169735821765792218589591"),
    std::string("-11.38487065424289926455670693026324154897"),
    std::string("-5.267493065826746854057522400355968349487"),
    std::string("-3.380515006246585636982705879447343908710"),
    std::string("-2.449389415584596120559886209228247603588"),
    std::string("-1.885641877519764696742640912892192138948"),
    std::string("-1.501273395806929321166878407802513489006"),
    std::string("-1.217540824620556112967363954815945051440"),
    std::string("-0.995584052213885017701916174070286728690"),
    std::string("-0.813943283689702134700791153944234787826"),
    std::string("-0.659730571520776497571894083155934598738"),
    std::string("-0.524666221946800013672912944225484267577"),
    std::string("-0.403110899873226639632302507595373966107"),
    std::string("-0.291006191384749157053699588868175542831"),
    std::string("-0.185262230689134893590611161683057288151"),
    std::string("-0.083377714865928797766081111834776139419"),
    std::string("+0.016816277694182235183613765683515814608"),
    std::string("+0.117348947461081138791123911712588538823"),
    std::string("+0.220277200345896811825735903245910395013"),
    std::string("+0.327858006713133894377632104603830612443"),
    std::string("+0.442757416732716003387005780729521775142"),
    std::string("+0.568339978690056594448370280409335674028"),
    std::string("+0.709111150679693161502953876948206134251"),
    std::string("+0.871447982724318736456450889600313566322"),
    std::string("+1.064893126883382883070602672330654873467"),
    std::string("+1.304620940055637758068676604243490789981"),
    std::string("+1.616561423993499746222693712228471444975"),
    std::string("+2.049284169128083854684598677542321054701"),
    std::string("+2.706013866772690776762802272387995008883"),
    std::string("+3.852265694684644431798502654664486784281"),
    std::string("+6.442872473492543706116374295155986665689"),
    std::string("+18.50682164946078937351939699173599806322"),
    std::string("-21.71511268125467732197860246782204326424"),
    std::string("-6.799711455220378699925262759608633364881"),
    std::string("-3.982398246755985988136937162208524531415"),
    std::string("-2.773749295383414785367218582747839892086"),
    std::string("-2.091377514288551922805505865065361456206"),
    std::string("-1.645710726227903324145268847988750929327"),
    std::string("-1.326364327785606923837177509628989183020"),
    std::string("-1.082032423786429024334300346959611194184"),
    std::string("-0.885556936614805539549102835647837114698"),
    std::string("-0.721146875575603881346723259450038063626"),
    std::string("-0.578923587933547459074360503562839024801"),
    std::string("-0.452315659441809840590370875798785534308"),
    std::string("-0.336700526432873567705601408394517166867"),
    std::string("-0.228641711559025801760338516771112454417"),
    std::string("-0.125429597808635396992753982578197504251"),
    std::string("-0.024783032802668639485159851320247176887"),
    std::string("+0.075364238757394057406540142053236657893"),
    std::string("+0.177037606584870144102124457600595480935"),
    std::string("+0.282388345736992402257075892997830602995"),
    std::string("+0.393883040751741706787896957407970311332"),
    std::string("+0.514552908476916215315057443087848985960"),
    std::string("+0.648360827459086671259124933009808676816"),
    std::string("+0.800789302937511486368501249988922868398"),
    std::string("+0.979852083895098379070550416008894063981"),
    std::string("+1.197962176161039678073934213444330641191"),
    std::string("+1.475667914251656529665244308863149440407"),
    std::string("+1.849899993421927279907583573513910565420"),
    std::string("+2.394715716509944028949293784391050288178"),
    std::string("+3.284140805377558874791372408615007106080"),
    std::string("+5.047788309886046161024195677515610431415"),
    std::string("+10.43118766353434557765417924217204190581"),
    std::string("-225.9508464541951420257954832034531539517"),
    std::string("-9.541351662275262190126139119028156274611"),
    std::string("-4.823420043893907862054353680847305497876"),
    std::string("-3.182765875433193141105939767350710552933"),
    std::string("-2.336340190554474260125467201853070971377"),
    std::string("-1.811387450326824859772397320474032833640"),
    std::string("-1.447903589767527572247697535688324176874"),
    std::string("-1.176633557723514817784088886576542357769"),
    std::string("-0.962651053362549033316523795772762123868"),
    std::string("-0.786363656369640427133898961874716113196"),
    std::string("-0.635859928661580792460937942939007606151"),
    std::string("-0.503408405675589727181403413551750858022"),
    std::string("-0.383693630269594378861861022119871463483"),
    std::string("-0.272854660955125653508239443601404959905"),
    std::string("-0.167922802749156111373513461785335480250"),
    std::string("-0.066468241863274196101992669494413871943"),
    std::string("+0.033642068934688920001833402629749731121"),
    std::string("+0.134430506618521928453281077000268539522"),
  }};
}

BOOST_AUTO_TEST_CASE(test_negatable_func_tangent_big)
{
  typedef boost::fixed_point::negatable<10, -117> fixed_point_type;
  typedef fixed_point_type::float_type            float_point_type;

  const fixed_point_type tol = ldexp(fixed_point_type(1), fixed_point_type::resolution + 12);

  // Check positive arguments.
  for(int i = 1; i < 128; ++i)
  {
    const fixed_point_type x = tan(fixed_point_type(i) / 10);
    const float_point_type y = float_point_type(local::reference[i]);

    BOOST_CHECK_CLOSE_FRACTION(x, fixed_point_type(y), tol);
  }

  // Check negative arguments.
  for(int i = 1; i < 128; ++i)
  {
    const fixed_point_type x = tan(fixed_point_type(-i) / 10);
    const float_point_type y = -float_point_type(local::reference[i]);

    BOOST_CHECK_CLOSE_FRACTION(x, fixed_point_type(y), tol);
  }
}

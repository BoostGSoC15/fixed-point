///////////////////////////////////////////////////////////////////////////////
//  Copyright Christopher Kormanyos 2015.
//  Copyright Nikhar Agrawal 2015.
//  Copyright Paul Bristow 2015.
//  Distributed under the Boost Software License,
//  Version 1.0. (See accompanying file LICENSE_1_0.txt
//  or copy at http://www.boost.org/LICENSE_1_0.txt)

//! \file
//!\brief Tests for the trigonometric cosine function of (fixed_point) for a big digit range.

#include <array>
#include <cmath>
#include <string>

#define BOOST_TEST_MODULE test_negatable_func_cosine_big
#define BOOST_LIB_DIAGNOSTIC

#include <boost/fixed_point/fixed_point.hpp>
#include <boost/test/included/unit_test.hpp>

namespace local
{
  // Table[N[Cos[n / 10], 40], {n, 1, 127, 1}]
  const std::array<std::string, 128U> reference =
  {{
    std::string("+0.0"),
    std::string("+0.9950041652780257660955619878038702948386"),
    std::string("+0.9800665778412416311241965167481688773935"),
    std::string("+0.9553364891256060196423102275680498982442"),
    std::string("+0.9210609940028850827985267320518016140259"),
    std::string("+0.8775825618903727161162815826038296519916"),
    std::string("+0.8253356149096782972409524989553760388781"),
    std::string("+0.7648421872844884262558599901918649092682"),
    std::string("+0.6967067093471654209207499816423249261018"),
    std::string("+0.6216099682706644564847161514071335087218"),
    std::string("+0.5403023058681397174009366074429766037323"),
    std::string("+0.4535961214255773877713700517847161221215"),
    std::string("+0.3623577544766735776383733556230760203399"),
    std::string("+0.2674988286245874069979841092928713592759"),
    std::string("+0.1699671429002409386167480352036498029282"),
    std::string("+0.0707372016677029100881898514342687090851"),
    std::string("-0.0291995223012887262057704629464985244449"),
    std::string("-0.1288444942955246840876428573348735141016"),
    std::string("-0.2272020946930870553166743065305807324770"),
    std::string("-0.3232895668635034222788336950803101745942"),
    std::string("-0.4161468365471423869975682295007621897660"),
    std::string("-0.5048461045998574516209385237191674704070"),
    std::string("-0.5885011172553457085241426126549284162938"),
    std::string("-0.6662760212798241933178805711660172301633"),
    std::string("-0.7373937155412454996088222273347829084330"),
    std::string("-0.8011436155469337148335027904673516644286"),
    std::string("-0.8568887533689472337977021516452011123539"),
    std::string("-0.9040721420170611479825272819433301263318"),
    std::string("-0.9422223406686581525867881173661540124634"),
    std::string("-0.9709581651495905217811066693455321791176"),
    std::string("-0.9899924966004454572715727947312613023937"),
    std::string("-0.9991351502732794644923760545414662628366"),
    std::string("-0.9982947757947530846616607222835826914470"),
    std::string("-0.9874797699088648839365910511028533110739"),
    std::string("-0.9667981925794610142822015397656939111959"),
    std::string("-0.9364566872907963376986576266717604630200"),
    std::string("-0.8967584163341470058702917252659392299504"),
    std::string("-0.8481000317104081588356701063544023697133"),
    std::string("-0.7909677119144166999965681743507251864017"),
    std::string("-0.7259323042001401293723304846143505840213"),
    std::string("-0.6536436208636119146391681830977503814241"),
    std::string("-0.5748239465332689115350286796597927762561"),
    std::string("-0.4902608213406995776555448813771336467313"),
    std::string("-0.4007991720799752969067623963360344850664"),
    std::string("-0.3073328699784196831191397422177123711895"),
    std::string("-0.2107957994307797059804818247938303930108"),
    std::string("-0.1121525269350545174299078212291896424878"),
    std::string("-0.0123886634628907371505082963271106103690"),
    std::string("+0.0874989834394465693202152576494876339575"),
    std::string("+0.1865123694225754044943291441219199986824"),
    std::string("+0.2836621854632262644666391715135573083344"),
    std::string("+0.3779777427129805633205755529289816708986"),
    std::string("+0.4685166713003769586390939266086457040999"),
    std::string("+0.5543743361791609294449466335608338046847"),
    std::string("+0.6346928759426343624067518389807409491896"),
    std::string("+0.7086697742912600000274211813258437349878"),
    std::string("+0.7755658785102497976558096621572819230778"),
    std::string("+0.8347127848391596827492340309974249173486"),
    std::string("+0.8855195169413190041646581017614862000541"),
    std::string("+0.9274784307440357409061046800324636948954"),
    std::string("+0.9601702866503660205456522979229244054519"),
    std::string("+0.9832684384425845965850212746479928513646"),
    std::string("+0.9965420970232174751394026238692639525279"),
    std::string("+0.9998586363834151422866736621396880605230"),
    std::string("+0.9931849187581926585947390986721563878697"),
    std::string("+0.9765876257280234998863132539440693662684"),
    std::string("+0.9502325919585294662197377216681973755128"),
    std::string("+0.9143831482353194411379018434766544183639"),
    std::string("+0.8693974903498251724416246398462714615778"),
    std::string("+0.8157251001253570726567558363580561421339"),
    std::string("+0.7539022543433046381411975217191820122183"),
    std::string("+0.6845466664428063406217999420893208949243"),
    std::string("+0.6083513145322546710048504790937249158206"),
    std::string("+0.5260775173811051889154065767376851916778"),
    std::string("+0.4385473275743906491340984687003411601615"),
    std::string("+0.3466353178350258109716193361718955783718"),
    std::string("+0.2512598425822553800581527493517955727722"),
    std::string("+0.1533738620378645259773842395720535148641"),
    std::string("+0.0539554205626495730325679129524746508521"),
    std::string("-0.0460021256395365944977529599584875696243"),
    std::string("-0.1455000338086135258688413818311946826093"),
    std::string("-0.2435441537357914644650517681021542666999"),
    std::string("-0.3391548609838352074004881245196434272444"),
    std::string("-0.4313768449706201737093264654465137321227"),
    std::string("-0.5192886541166852991448048405854620768889"),
    std::string("-0.6020119026848236153484265229569987002961"),
    std::string("-0.6787200473200127008644697851604765806487"),
    std::string("-0.7486466455973991573187917808892808765946"),
    std::string("-0.8110930140616555628890855042193244841003"),
    std::string("-0.8654352092411120596398276782253519873473"),
    std::string("-0.9111302618846769883682947111811653112463"),
    std::string("-0.9477216021311120247190665895753688757583"),
    std::string("-0.9748436214041637419414453384758042477423"),
    std::string("-0.9922253254526034077569092346351553086779"),
    std::string("-0.9996930420352064721779474206729152326465"),
    std::string("-0.9971721561963784728916016401779880393241"),
    std::string("-0.9846878557941269100203420798837339387634"),
    std::string("-0.9623648798313100340703563708914403898281"),
    std::string("-0.9304262721047535185493777520892213212352"),
    std::string("-0.8891911526253610546344386986891067794600"),
    std::string("-0.8390715290764524522588639478240648345199"),
    std::string("-0.7805681801691835415705384914775232718984"),
    std::string("-0.7142656520271997373281207541081575956465"),
    std::string("-0.6408264175949938324874503631103846468600"),
    std::string("-0.5609842574272290669927754576334520925659"),
    std::string("-0.4755369279959925355238114901488587260787"),
    std::string("-0.3853381907718293227430621685779554843936"),
    std::string("-0.2912892817213448374635719993567451009118"),
    std::string("-0.1943299064553354940239479412431387000639"),
    std::string("-0.0954288510009510108237967185306686164948"),
    std::string("+0.0044256979880507857483550247239415732257"),
    std::string("+0.1042360268656972310733393156321603206040"),
    std::string("+0.2030048638187510977937111617431723218671"),
    std::string("+0.2997453432770142293014575327463525169801"),
    std::string("+0.3934908663478905734410575938292016122682"),
    std::string("+0.4833047587530058889106811800555168258399"),
    std::string("+0.5682896297679739096501230415123272627072"),
    std::string("+0.6475963386538764778765395284138369018662"),
    std::string("+0.7204324789908382044651013517000393732379"),
    std::string("+0.7860702961410391264743606728621190051771"),
    std::string("+0.8438539587324921046539552931736217831681"),
    std::string("+0.8932061115093226901449898643970008054046"),
    std::string("+0.9336336440746375482598182619482557738363"),
    std::string("+0.9647326178866095909157101860374330783982"),
    std::string("+0.9861923022788635834509407347756117701719"),
    std::string("+0.9977982791785806638025662028245475253770"),
    std::string("+0.9994345855010047570480121378858738023122"),
    std::string("+0.9910848718142531586852387555461112373761"),
  }};
}

BOOST_AUTO_TEST_CASE(test_negatable_func_cosine_big)
{
  typedef boost::fixed_point::negatable<10, -117> fixed_point_type;
  typedef fixed_point_type::float_type            float_point_type;

  const fixed_point_type tol = ldexp(fixed_point_type(1), fixed_point_type::resolution + 12);

  // Check positive arguments.
  for(int i = 1; i < 128; ++i)
  {
    const fixed_point_type x = cos(fixed_point_type(i) / 10);
    const float_point_type y = float_point_type(local::reference[i]);

    BOOST_CHECK_CLOSE_FRACTION(x, fixed_point_type(y), tol);
  }

  // Check negative arguments.
  for(int i = 1; i < 128; ++i)
  {
    const fixed_point_type x = cos(fixed_point_type(-i) / 10);
    const float_point_type y = float_point_type(local::reference[i]);

    BOOST_CHECK_CLOSE_FRACTION(x, fixed_point_type(y), tol);
  }
}
